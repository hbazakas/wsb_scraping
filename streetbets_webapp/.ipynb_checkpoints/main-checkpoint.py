{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from flask import Flask\n",
    "\n",
    "#app = Flask(__name__)\n",
    "\n",
    "#@app.route(\"/\")\n",
    "#def index():\n",
    "    #return \"Congratulations, it's a web app!\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import praw\n",
    "import pandas as pd\n",
    "import time\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from collections import Counter\n",
    "from nltk.corpus import stopwords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "start = time.time()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6690, 6690)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Stock Tickers and Names\n",
    "\n",
    "URL = 'https://stockanalysis.com/stocks/'\n",
    "page = requests.get(URL)\n",
    "soup = BeautifulSoup(page.content, 'lxml')\n",
    "wsb_tickers = soup.find_all('li')\n",
    "\n",
    "wsb_ticker_list = []\n",
    "wsb_name_list = []\n",
    "\n",
    "for i in wsb_tickers[12:-18]:\n",
    "    #print(i.text.split(\" - \"))\n",
    "    wsb_ticker_list.append(i.text.split(\" - \")[0])\n",
    "    wsb_name_list.append(i.text.split(\" - \")[1])\n",
    "    \n",
    "len(wsb_ticker_list), len(wsb_name_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(200, 200)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Crypto Tickers and Names\n",
    "\n",
    "URL = 'https://coinmarketcap.com/all/views/all/'\n",
    "page = requests.get(URL)\n",
    "soup = BeautifulSoup(page.content, 'lxml')\n",
    "ssb_names = soup.find_all('td', \n",
    "                        class_ = 'cmc-table__cell cmc-table__cell--sticky cmc-table__cell--sortable cmc-table__cell--left cmc-table__cell--sort-by__name')\n",
    "ssb_name_list = []\n",
    "\n",
    "for i in ssb_names:\n",
    "    ssb_name_list.append(i.text.split('\\\">\"')[0])\n",
    "\n",
    "ssb_tickers = soup.find_all('td', \n",
    "                        class_ = 'cmc-table__cell cmc-table__cell--sortable cmc-table__cell--left cmc-table__cell--sort-by__symbol')\n",
    "ssb_ticker_list = []\n",
    "\n",
    "for i in ssb_tickers:\n",
    "    ssb_ticker_list.append(i.text.split('\\\">\"')[0])\n",
    "\n",
    "len(ssb_ticker_list), len(ssb_name_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "reddit = praw.Reddit(client_id='HG7dA6CRLvCD_w',\n",
    "                     client_secret='rH5FP42F__la6jpUdt01BQvZU48WiA', \n",
    "                     user_agent='WSB_Trends')\n",
    "\n",
    "stopwords_list = stopwords.words('english')\n",
    "\n",
    "for ind in range(len(stopwords_list)):\n",
    "    stopwords_list[ind] = stopwords_list[ind].upper()\n",
    "    \n",
    "def comments_scraper(sub, comment_age, case_sensitive = False):\n",
    "    posts = []\n",
    "    subreddit = reddit.subreddit(sub)\n",
    "    for post in subreddit.hot(limit = 25):\n",
    "        posts.append([post.title, post.score, post.id, post.subreddit, post.url, post.num_comments, post.selftext, post.created])\n",
    "    posts = pd.DataFrame(posts,columns=['title', 'score', 'id', 'subreddit', 'url', 'num_comments', 'body', 'created'])\n",
    "\n",
    "    comment_count = 0\n",
    "    comments = \"\"\n",
    "\n",
    "    for post_id in posts.id:\n",
    "        submission = reddit.submission(id=post_id)\n",
    "        submission.comments.replace_more(limit=0)\n",
    "        for comment in submission.comments.list():\n",
    "            '''Loops through all comments. comment.body is a string with each comment's contents. \n",
    "            comment.created is the time the comment was created.'''\n",
    "            comment_age = (comment.created - time.time())/3600\n",
    "            if comment_age <=comment_age:\n",
    "                comments += comment.body + \" \"\n",
    "                comment_count+=1\n",
    "    if case_sensitive == False:\n",
    "        comments = comments.upper()\n",
    "    return(comments)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>ticker</th>\n",
       "      <th>frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2575</td>\n",
       "      <td>GameStop</td>\n",
       "      <td>GME</td>\n",
       "      <td>263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5072</td>\n",
       "      <td>Rocket Companies</td>\n",
       "      <td>RKT</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>312</td>\n",
       "      <td>AMC Entertainment</td>\n",
       "      <td>AMC</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4724</td>\n",
       "      <td>Palantir</td>\n",
       "      <td>PLTR</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6231</td>\n",
       "      <td>UWM Holdings</td>\n",
       "      <td>UWMC</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5054</td>\n",
       "      <td>Restoration Hardware</td>\n",
       "      <td>RH</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1684</td>\n",
       "      <td>DuPont</td>\n",
       "      <td>DD</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5427</td>\n",
       "      <td>Tanger Factory Outlet Centers</td>\n",
       "      <td>SKT</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4426</td>\n",
       "      <td>OneSmart International Education</td>\n",
       "      <td>ONE</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4810</td>\n",
       "      <td>Purple Innovation</td>\n",
       "      <td>PRPL</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5817</td>\n",
       "      <td>Toronto-Dominion Bank</td>\n",
       "      <td>TD</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6156</td>\n",
       "      <td>Ubiquiti</td>\n",
       "      <td>UI</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2609</td>\n",
       "      <td>Grocery Outlet</td>\n",
       "      <td>GO</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6080</td>\n",
       "      <td>Grupo Televisa</td>\n",
       "      <td>TV</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>211</td>\n",
       "      <td>C3.ai</td>\n",
       "      <td>AI</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  name ticker frequency\n",
       "2575                          GameStop    GME       263\n",
       "5072                  Rocket Companies    RKT        66\n",
       "312                  AMC Entertainment    AMC        62\n",
       "4724                          Palantir   PLTR        48\n",
       "6231                      UWM Holdings   UWMC        47\n",
       "5054              Restoration Hardware     RH        37\n",
       "1684                            DuPont     DD        33\n",
       "5427     Tanger Factory Outlet Centers    SKT        32\n",
       "4426  OneSmart International Education    ONE        10\n",
       "4810                 Purple Innovation   PRPL         9\n",
       "5817             Toronto-Dominion Bank     TD         9\n",
       "6156                          Ubiquiti     UI         9\n",
       "2609                    Grocery Outlet     GO         8\n",
       "6080                    Grupo Televisa     TV         7\n",
       "211                              C3.ai     AI         7"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wsb_comments = comments_scraper('wallstreetbets', 6, case_sensitive = True)\n",
    "            \n",
    "for character in'$ -.,\\n':\n",
    "    wsb_comments_last_hour = wsb_comments.replace(character, \" \")\n",
    "\n",
    "wsb_comments = wsb_comments.split()\n",
    "wsb_word_counts = Counter(wsb_comments)\n",
    "\n",
    "frequencies = []\n",
    "for tick in wsb_ticker_list:\n",
    "    if tick not in stopwords_list:\n",
    "        frequencies.append(wsb_word_counts[tick])\n",
    "    else:\n",
    "        frequencies.append(0)\n",
    "\n",
    "wsb_tickers_and_counts = pd.DataFrame([wsb_name_list, wsb_ticker_list, frequencies]).T\n",
    "wsb_tickers_and_counts.columns = ['name','ticker','frequency']\n",
    "wsb_tickers_and_counts.sort_values(by = ['frequency'], ascending = False)[0:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>ticker</th>\n",
       "      <th>frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Cardano</td>\n",
       "      <td>ADA</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64</td>\n",
       "      <td>Enjin Coin</td>\n",
       "      <td>ENJ</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Bitcoin</td>\n",
       "      <td>BTC</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26</td>\n",
       "      <td>VeChain</td>\n",
       "      <td>VET</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>89</td>\n",
       "      <td>Decentraland</td>\n",
       "      <td>MANA</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>XRP</td>\n",
       "      <td>XRP</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Ethereum</td>\n",
       "      <td>ETH</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>61</td>\n",
       "      <td>BitTorrent</td>\n",
       "      <td>BTT</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>Dogecoin</td>\n",
       "      <td>DOGE</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>Stellar</td>\n",
       "      <td>XLM</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>90</td>\n",
       "      <td>Chiliz</td>\n",
       "      <td>CHZ</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>121</td>\n",
       "      <td>Harmony</td>\n",
       "      <td>ONE</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>85</td>\n",
       "      <td>Nano</td>\n",
       "      <td>NANO</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>154</td>\n",
       "      <td>COTI</td>\n",
       "      <td>COTI</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>37</td>\n",
       "      <td>The Graph</td>\n",
       "      <td>GRT</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             name ticker frequency\n",
       "3         Cardano    ADA        90\n",
       "64     Enjin Coin    ENJ        75\n",
       "0         Bitcoin    BTC        41\n",
       "26        VeChain    VET        24\n",
       "89   Decentraland   MANA        22\n",
       "6             XRP    XRP        18\n",
       "1        Ethereum    ETH        17\n",
       "61     BitTorrent    BTT        17\n",
       "14       Dogecoin   DOGE        16\n",
       "10        Stellar    XLM        15\n",
       "90         Chiliz    CHZ        14\n",
       "121       Harmony    ONE        12\n",
       "85           Nano   NANO        12\n",
       "154          COTI   COTI        12\n",
       "37      The Graph    GRT        12"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ssb_comments = comments_scraper('satoshistreetbets', 6, case_sensitive = True)\n",
    "    \n",
    "for character in'$ -.,\\n':\n",
    "    ssb_comments = ssb_comments.replace(character, \" \")\n",
    "\n",
    "ssb_comments = ssb_comments.split()\n",
    "ssb_word_counts = Counter(ssb_comments)\n",
    "\n",
    "frequencies = []\n",
    "\n",
    "for coin in range(len(ssb_name_list)):\n",
    "    freq = 0\n",
    "    #print(name_list[coin], ticker_list[coin])\n",
    "    if ssb_name_list[coin] not in stopwords_list:\n",
    "        freq+=ssb_word_counts[ssb_name_list[coin]]\n",
    "    else:\n",
    "        freq+=0\n",
    "    if ssb_ticker_list[coin] not in stopwords_list:\n",
    "        freq+=ssb_word_counts[ssb_ticker_list[coin]]\n",
    "    else:\n",
    "        freq+=0        \n",
    "    \n",
    "    frequencies.append(freq)\n",
    "\n",
    "ssb_tickers_and_counts = pd.DataFrame([ssb_name_list, ssb_ticker_list, frequencies]).T\n",
    "ssb_tickers_and_counts.columns = ['name','ticker','frequency']\n",
    "ssb_tickers_and_counts.sort_values(by = ['frequency'], ascending = False)[0:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done in 54.63 seconds.\n"
     ]
    }
   ],
   "source": [
    "end = time.time()\n",
    "print(\"Done in\", round((end - start), 2), \"seconds.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#if __name__ == \"__main__\":\n",
    "    #app.run(host=\"127.0.0.1\", port=8080, debug=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
